// Quick sort(fastest algorithm)

// #include <bits/stdc++.h>
// using namespace std;

// int partition(int a[], int s, int e)
// {
//     int pivot = a[s];
//     int count = 0;

//     for (int i = s + 1; i <= e; i++)
//     {
//         if (a[i] <= pivot)
//             count++;
//     }

//     // place pivot at right position
//     int pivotIndex = s + count;
//     swap(a[pivotIndex], a[s]);

//     // handle left and right part
//     int i = s;
//     int j = e;

//     while (i < pivotIndex && j > pivotIndex)
//     {
//         while (a[i] <= pivot)
//         {
//             i++;
//         }

//         while (a[j] > pivot)
//         {
//             j--;
//         }

//         if (i < pivotIndex && j > pivotIndex)
//             swap(a[i++], a[j--]);
//     }
//     return pivotIndex;
// }

// void quickSort(int a[], int s, int e)
// {
//     // base case
//     if (s >= e)
//         return;

//     // partition
//     int p = partition(a, s, e);

//     // left part sort
//     quickSort(a, s, p - 1);

//     // right part sort
//     quickSort(a, p + 1, e);
// }

// int main()
// {
//     int arr[] = {2, 4, 3, 1, 5, 7, 8, 6};
//     int n = 8;
//     quickSort(arr, 0, n - 1);
//     for (int i = 0; i < n; i++)
//         cout << arr[i] << " ";
//     cout << endl;
// }

// power of set(subsets)

// #include <bits/stdc++.h>
// using namespace std;

// void powerOfSet(vector<int> a, vector<int> output, int index, vector<vector<int>> &ans)
// {
//     // base case
//     if (index >= a.size())
//     {
//         ans.push_back(output);
//         return;
//     }

//     // exclude
//     powerOfSet(a, output, index + 1, ans);

//     // include
//     int ele = a[index];
//     output.push_back(ele);
//     powerOfSet(a, output, index + 1, ans);
// }

// int main()
// {
//     vector<vector<int>> ans;
//     vector<int> a = {1, 2, 3};
//     vector<int> output;
//     int index = 0;
//     powerOfSet(a, output, index, ans);

//     for (int i = 0; i < ans.size(); i++)
//     {
//         for (int j = 0; j < ans[i].size(); j++)
//         {
//             cout << ans[i][j] << " ";
//         }
//         cout<< endl;
//     }
// }


// subsequences of a string 

// the strings generated by deleting 0 or more letters from the string and keeping the letters in the same order

// #include <bits/stdc++.h>
// using namespace std;

// void subSequences(string s, string output ,int index,vector<string>& ans)
// {
//     //base case
//     if(index >= s.size())
//     {
//         ans.push_back(output);
//         return;
//     }

//     // exclude
//     subSequences(s, output,index+1,ans);

//     // include
//     char ele = s[index];
//     output.push_back(ele);
//     subSequences(s, output,index+1,ans);

// }

// int main()
// {
//     vector<string> ans;
//     here the ans is an array of string
//     string output;
//     int index = 0;
//     string s = "abc";
//     subSequences(s,output,index,ans);

//     for(int i = 0; i < ans.size(); i++)
//     {
//         cout<<ans[i]<<endl;
//     }
// }
